name: AICultureKit Gate
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  gate:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 🚀 Checkout代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史，用于diff-cover
    
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || echo "requirements.txt不存在，跳过"
        pip install pre-commit diff-cover coverage pytest ruff black isort bandit detect-secrets pytest-cov
    
    - name: 📝 代码风格检查
      run: |
        echo "🔍 运行代码风格检查..."
        mkdir -p artifacts
        python -m ruff check . --output-format=json > artifacts/ruff_report.json || true
        python -m ruff check . || echo "⚠️ Ruff发现问题，但不阻塞CI"
        python -m black --check --diff . || echo "⚠️ Black发现格式问题，但不阻塞CI"
        python -m isort --check-only --diff . || echo "⚠️ isort发现问题，但不阻塞CI"
      continue-on-error: true
    
    - name: 🧪 运行测试
      run: |
        echo "🧪 运行测试套件..."
        pytest -q --maxfail=5 --disable-warnings --tb=short || echo "⚠️ 部分测试失败，但继续执行"
        pytest -q --maxfail=1 --disable-warnings --cov=aiculture --cov=tools --cov-report=xml:coverage.xml --cov-report=term-missing || echo "⚠️ 覆盖率测试失败"
      continue-on-error: true
    
    - name: 📊 增量覆盖率检查
      run: |
        echo "📊 运行增量覆盖率检查..."
        if [ -f "coverage.xml" ]; then
          echo "发现覆盖率报告，执行diff-cover检查..."
          diff-cover coverage.xml --compare-branch=origin/main --fail-under=80 --json-report=artifacts/diff_coverage.json || echo "⚠️ 增量覆盖率不达标"
          diff-cover coverage.xml --compare-branch=origin/main --html-report=artifacts/diff_coverage.html || true
          echo "📋 覆盖率报告已生成"
        else
          echo "⚠️ 未找到覆盖率报告，跳过增量覆盖率检查"
        fi
      continue-on-error: true
    
    - name: 🔒 安全检查
      run: |
        echo "🔒 运行安全检查..."
        bandit -r . -f json -o artifacts/bandit_report.json || echo "⚠️ Bandit发现安全问题"
        bandit -r . || echo "⚠️ 安全检查发现问题，但不阻塞CI"
        detect-secrets scan --all-files --baseline .secrets.baseline || echo "⚠️ 发现潜在密钥泄漏"
      continue-on-error: true
    
    - name: 📋 生成AICultureKit报告
      run: |
        echo "📋 生成AICultureKit综合质量报告..."
        if [ -d "tools/problem_aggregator" ]; then
          echo "🔍 运行AICultureKit问题聚合器..."
          python -m tools.problem_aggregator.aggregator --base origin/main --out artifacts/ci_problems.json --md artifacts/ci_problems_report.md || echo "⚠️ 问题聚合器执行失败"
          
          # 如果有问题，尝试生成AI修复建议
          if [ -f "artifacts/ci_problems.json" ]; then
            echo "🤖 尝试生成AI修复建议..."
            python -m tools.ai_fix_agent.agent --in artifacts/ci_problems.json --out artifacts/ai_fixes || echo "⚠️ AI修复建议生成失败"
          fi
        else
          echo "⚠️ 未找到问题聚合器，跳过"
        fi
      continue-on-error: true
    
    - name: 🚪 Gate决策
      run: |
        echo "🚪 AICultureKit Gate 最终决策..."
        
        # 检查是否有阻塞性问题
        BLOCKING_ISSUES=0
        
        if [ -f "artifacts/ci_problems.json" ]; then
          # 使用Python解析JSON获取阻塞性问题数量
          BLOCKING_ISSUES=$(python -c "
import json
try:
    with open('artifacts/ci_problems.json', 'r') as f:
        data = json.load(f)
    print(data.get('summary', {}).get('blocking', 0))
except:
    print(0)
" 2>/dev/null || echo 0)
          
          echo "发现 $BLOCKING_ISSUES 个阻塞性问题"
        fi
        
        # 生成CI摘要
        echo "# 🔍 AICultureKit CI Gate 报告" > artifacts/ci_summary.md
        echo "" >> artifacts/ci_summary.md
        echo "**构建时间**: $(date)" >> artifacts/ci_summary.md
        echo "**分支**: ${{ github.ref_name }}" >> artifacts/ci_summary.md
        echo "**提交**: ${{ github.sha }}" >> artifacts/ci_summary.md
        echo "**PR**: ${{ github.event.number }}" >> artifacts/ci_summary.md
        echo "" >> artifacts/ci_summary.md
        echo "## 📊 检查结果" >> artifacts/ci_summary.md
        echo "" >> artifacts/ci_summary.md
        echo "- **代码风格**: $([ -f artifacts/ruff_report.json ] && echo '✅ 已检查' || echo '❌ 未执行')" >> artifacts/ci_summary.md
        echo "- **测试执行**: $([ -f coverage.xml ] && echo '✅ 已执行' || echo '❌ 未执行')" >> artifacts/ci_summary.md
        echo "- **增量覆盖率**: $([ -f artifacts/diff_coverage.json ] && echo '✅ 已检查' || echo '❌ 未执行')" >> artifacts/ci_summary.md
        echo "- **安全检查**: $([ -f artifacts/bandit_report.json ] && echo '✅ 已检查' || echo '❌ 未执行')" >> artifacts/ci_summary.md
        echo "- **问题聚合**: $([ -f artifacts/ci_problems.json ] && echo '✅ 已生成' || echo '❌ 未生成')" >> artifacts/ci_summary.md
        echo "- **阻塞性问题**: $BLOCKING_ISSUES 个" >> artifacts/ci_summary.md
        echo "" >> artifacts/ci_summary.md
        
        if [ "$BLOCKING_ISSUES" -gt 0 ]; then
          echo "## ❌ PR合并被阻塞" >> artifacts/ci_summary.md
          echo "" >> artifacts/ci_summary.md
          echo "存在 $BLOCKING_ISSUES 个阻塞性问题需要修复" >> artifacts/ci_summary.md
          echo "" >> artifacts/ci_summary.md
          echo "### 🚀 修复步骤" >> artifacts/ci_summary.md
          echo "1. 下载CI artifacts查看详细报告" >> artifacts/ci_summary.md
          echo "2. 查看 \`artifacts/ci_problems_report.md\` 了解问题详情" >> artifacts/ci_summary.md
          echo "3. 应用AI修复建议: \`cd artifacts/ai_fixes && ./apply_fixes.sh\`" >> artifacts/ci_summary.md
          echo "4. 本地验证: \`python -m tools.problem_aggregator.aggregator\`" >> artifacts/ci_summary.md
          echo "5. 修复完成后重新推送" >> artifacts/ci_summary.md
        else
          echo "## ✅ 所有检查通过" >> artifacts/ci_summary.md
          echo "" >> artifacts/ci_summary.md
          echo "PR可以安全合并" >> artifacts/ci_summary.md
        fi
        
        # 仅在PR时阻塞
        if [ "${{ github.event_name }}" = "pull_request" ] && [ "$BLOCKING_ISSUES" -gt 0 ]; then
          echo "❌ PR合并被阻塞: 存在 $BLOCKING_ISSUES 个阻塞性问题"
          echo "📋 详细报告将在CI artifacts中提供"
          exit 1
        else
          echo "✅ Gate检查完成"
          exit 0
        fi
    
    - name: 📤 上传报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: aiculturekit-reports
        path: artifacts/
        retention-days: 7
    
    - name: 💬 PR评论
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🔍 AICultureKit CI Gate 报告\n\n';
          
          try {
            if (fs.existsSync('artifacts/ci_summary.md')) {
              const summary = fs.readFileSync('artifacts/ci_summary.md', 'utf8');
              comment += summary;
            } else {
              comment += '⚠️ 未能生成详细报告，请查看CI日志\n';
            }
          } catch (error) {
            comment += `❌ 读取报告失败: ${error.message}\n`;
          }
          
          comment += '\n---\n';
          comment += `🤖 由 AICultureKit 自动生成 | 构建: ${context.runId}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
