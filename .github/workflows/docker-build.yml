name: 🐳 Docker Build & Publish

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - "main"
    tags:
      - "v*"
  # 移除 pull_request 触发器，避免与 Quality Gate 重复
  # 移除 feature/* 分支触发，避免与 Quick Check 重复
  workflow_dispatch: # 允许手动触发

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build-test:
    name: 🐳 Build & Test Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: 🔑 Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: 🧪 Test Docker image functionality
        run: |
          # 构建临时镜像用于测试
          docker build -t aiculture-kit:test .

          # 测试基本功能
          echo "Testing basic functionality..."
          docker run --rm aiculture-kit:test aiculture --version
          docker run --rm aiculture-kit:test aiculture --help

          # 测试健康检查
          echo "Testing health check..."
          docker run --rm aiculture-kit:test python -c "import aiculture; print('✅ Import successful')"

          # 测试 CLI 命令
          echo "Testing CLI commands..."
          docker run --rm aiculture-kit:test aiculture culture --help
          docker run --rm aiculture-kit:test aiculture quality --help
          docker run --rm aiculture-kit:test aiculture project --help
          docker run --rm aiculture-kit:test aiculture template --help

      - name: 🐳 Test docker-compose services
        run: |
          echo "Testing docker-compose configuration..."

          # 验证 docker-compose 文件语法
          docker-compose config

          # 构建所有服务
          docker-compose build

          # 测试主服务
          docker-compose run --rm aiculture-kit aiculture --version

          # 清理
          docker-compose down --volumes --remove-orphans

      - name: 🔍 Inspect image
        if: github.event_name != 'pull_request'
        run: |
          echo "Image inspection:"
          docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} || \
          docker image inspect aiculture-kit:test

          echo "Image size:"
          docker images | grep -E "(aiculture-kit|${{ env.IMAGE_NAME }})"

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: docker-build-test
    if: github.event_name != 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Build image for scanning
        run: docker build -t aiculture-kit:scan .

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "aiculture-kit:scan"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  notify-status:
    name: 📢 Notify Build Status
    runs-on: ubuntu-latest
    needs: [docker-build-test, security-scan]
    if: always()

    steps:
      - name: 📊 Report status
        run: |
          if [[ "${{ needs.docker-build-test.result }}" == "success" ]]; then
            echo "✅ Docker build and test: SUCCESS"
          else
            echo "❌ Docker build and test: FAILED"
          fi

          if [[ "${{ needs.security-scan.result }}" == "success" ]] || [[ "${{ needs.security-scan.result }}" == "skipped" ]]; then
            echo "✅ Security scan: PASSED"
          else
            echo "⚠️ Security scan: ISSUES FOUND"
          fi
