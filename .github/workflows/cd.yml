name: CD
true:
  push:
    branches:
    - main
    tags:
    - v*
  workflow_dispatch: null
jobs:
  build-and-publish:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install build dependencies
      run: 'python -m pip install --upgrade pip

        pip install build twine

        '
    - name: Build package
      run: python -m build
    - name: Check package
      run: twine check dist/*
    - env:
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        TWINE_USERNAME: __token__
      if: github.ref == 'refs/heads/main'
      name: Publish to Test PyPI
      run: 'twine upload --repository testpypi dist/* || echo "Upload to Test PyPI
        failed or package already exists"

        '
    - env:
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        TWINE_USERNAME: __token__
      if: startsWith(github.ref, 'refs/tags/')
      name: Publish to PyPI
      run: twine upload dist/*
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: startsWith(github.ref, 'refs/tags/')
      name: Create GitHub Release
      uses: actions/create-release@v1
      with:
        body: "Changes in this Release\n- \u67E5\u770BCHANGELOG.md\u4E86\u89E3\u8BE6\
          \u7EC6\u66F4\u6539\n"
        draft: false
        prerelease: false
        release_name: Release ${{ github.ref_name }}
        tag_name: ${{ github.ref_name }}
    timeout-minutes: 30
  docker-build:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
    - id: meta
      name: Extract metadata
      uses: docker/metadata-action@v4
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/aiculture-kit
        tags: 'type=ref,event=branch

          type=ref,event=pr

          type=semver,pattern={{version}}

          type=semver,pattern={{major}}.{{minor}}

          '
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        cache-from: type=gha
        cache-to: type=gha,mode=max
        context: .
        labels: ${{ steps.meta.outputs.labels }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
    timeout-minutes: 30
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: 'python -m pip install --upgrade pip

        pip install -r requirements-dev.txt

        '
    - name: Run tests
      run: pytest --cov=aiculture --cov-report=xml
    timeout-minutes: 30
