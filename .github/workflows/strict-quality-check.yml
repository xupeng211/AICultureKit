name: 🔍 严格质量检查

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"
  COVERAGE_THRESHOLD_MIN: 25 # 当前最低阈值
  COVERAGE_THRESHOLD_TARGET: 80 # 目标阈值

jobs:
  strict-quality-check:
    name: 🔍 严格质量检查
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Set enforcement mode by branch
        id: set-mode
        run: |
          BRANCH="${{ github.ref_name }}"
          if [[ "$BRANCH" == "main" || "$BRANCH" == release/* ]]; then
            echo "mode=block" >> "$GITHUB_OUTPUT"
          else
            echo "mode=warn" >> "$GITHUB_OUTPUT"
          fi
          echo "AICULTURE_ENFORCE_BLOCKING=${{ steps.set-mode.outputs.mode }}" >> "$GITHUB_ENV"

      - name: Show enforcement mode
        run: echo "AICULTURE_ENFORCE_BLOCKING=$AICULTURE_ENFORCE_BLOCKING"

      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🐍 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: 📦 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install ruff detect-secrets bandit

      - name: 🧹 全量 Ruff 检查
        run: |
          echo "🔍 运行全量 Ruff 检查..."
          ruff check . --no-fix

      - name: 🎨 代码格式检查
        run: |
          echo "🎨 检查代码格式..."
          black --check --diff .
          isort --check-only --diff .
          ruff format --check .

      - name: 🔒 安全检查
        run: |
          echo "🔒 运行 Bandit 安全检查..."
          bandit -r aiculture -f json -o bandit-report.json || true
          echo "🔒 检查是否有高危安全问题..."
          bandit -r aiculture --severity-level high

      - name: 🔐 隐私/PII 扫描
        run: |
          echo "🔐 运行隐私/敏感信息扫描..."
          detect-secrets scan --baseline .secrets.baseline --all-files

      - name: 🧪 测试和覆盖率检查
        run: |
          echo "🧪 运行测试套件..."
          pytest --cov=aiculture --cov-report=xml --cov-report=term-missing --cov-fail-under=${{ env.COVERAGE_THRESHOLD_MIN }}

      - name: 📊 上传覆盖率报告
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: strict-check
          name: strict-quality-check

      - name: 🔧 类型检查
        run: |
          echo "🔧 运行 MyPy 类型检查..."
          mypy aiculture --ignore-missing-imports

      - name: 📋 生成检查报告
        if: always()
        run: |
          echo "📋 生成质量检查报告..."
          echo "## 🔍 严格质量检查报告" > quality-check-report.md
          echo "" >> quality-check-report.md
          echo "### 检查项目:" >> quality-check-report.md
          echo "- ✅ 全量 Ruff 代码质量检查" >> quality-check-report.md
          echo "- ✅ 代码格式检查 (Black, isort, ruff-format)" >> quality-check-report.md
          echo "- ✅ 安全检查 (Bandit)" >> quality-check-report.md
          echo "- ✅ 隐私/PII 扫描 (detect-secrets)" >> quality-check-report.md
          echo "- ✅ 测试覆盖率检查 (最低 ${{ env.COVERAGE_THRESHOLD_MIN }}%)" >> quality-check-report.md
          echo "- ✅ 类型检查 (MyPy)" >> quality-check-report.md
          echo "" >> quality-check-report.md
          echo "### 覆盖率目标进度:" >> quality-check-report.md
          echo "- 当前最低要求: ${{ env.COVERAGE_THRESHOLD_MIN }}%" >> quality-check-report.md
          echo "- 最终目标: ${{ env.COVERAGE_THRESHOLD_TARGET }}%" >> quality-check-report.md

      - name: 📤 上传检查报告
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: strict-quality-check-report
          path: quality-check-report.md

  # 覆盖率趋势跟踪
  coverage-trend:
    name: 📈 覆盖率趋势跟踪
    runs-on: ubuntu-latest
    needs: strict-quality-check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Set enforcement mode by branch
        id: set-mode
        run: |
          BRANCH="${{ github.ref_name }}"
          if [[ "$BRANCH" == "main" || "$BRANCH" == release/* ]]; then
            echo "mode=block" >> "$GITHUB_OUTPUT"
          else
            echo "mode=warn" >> "$GITHUB_OUTPUT"
          fi
          echo "AICULTURE_ENFORCE_BLOCKING=${{ steps.set-mode.outputs.mode }}" >> "$GITHUB_ENV"

      - name: Show enforcement mode
        run: echo "AICULTURE_ENFORCE_BLOCKING=$AICULTURE_ENFORCE_BLOCKING"

      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 🧪 运行测试获取覆盖率
        run: |
          pytest --cov=aiculture --cov-report=json

      - name: 📈 记录覆盖率历史
        run: |
          coverage_value=$(python -c "import json; data=json.load(open('coverage.json')); print(f'{data[\"totals\"][\"percent_covered\"]:.1f}')")
          echo "当前覆盖率: ${coverage_value}%"

          # 检查是否达到目标
          if (( $(echo "$coverage_value >= ${{ env.COVERAGE_THRESHOLD_TARGET }}" | bc -l) )); then
            echo "🎉 恭喜！已达到目标覆盖率 ${{ env.COVERAGE_THRESHOLD_TARGET }}%"
          else
            remaining=$(echo "${{ env.COVERAGE_THRESHOLD_TARGET }} - $coverage_value" | bc)
            echo "📊 距离目标还差 ${remaining}%"
          fi

