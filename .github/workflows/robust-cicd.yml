name: Robust CI/CD Pipeline
# 基于AI开发文化的强化CI/CD流水线，最大化构建成功率

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: '强制重建（跳过缓存）'
        required: false
        default: 'false'
        type: boolean
      environment:
        description: '部署环境'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: docker.io
  IMAGE_NAME: aiculture-kit
  PYTHON_VERSION: "3.10"
  NODE_VERSION: "18"

jobs:
  # ===== 第一阶段：预检测 =====
  pre-validation:
    name: 🔍 构建前预检测
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      risk-score: ${{ steps.health-check.outputs.score }}
      can-proceed: ${{ steps.health-check.outputs.can-proceed }}
      
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 完整历史，用于变更分析
    
    - name: 🔧 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install requests pyyaml docker
    
    - name: 🤖 AI开发文化检查
      id: ai-culture-check
      run: |
        echo "🤖 执行AI开发文化原则检查..."
        python -m aiculture.cli validate --path .
        echo "culture-check=$?" >> $GITHUB_OUTPUT
    
    - name: 🔍 CI/CD健康检查
      id: health-check
      run: |
        echo "🔍 执行全面健康检查..."
        python -c "
        from aiculture.cicd_guardian import run_cicd_health_check
        import json
        
        report = run_cicd_health_check('.')
        print(f'健康检查完成，风险评分: {report[\"score\"]}/100')
        print(f'风险统计: {report[\"risk_summary\"]}')
        
        # 输出结果到GitHub Actions
        with open('health-report.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        # 设置输出变量
        print(f'score={report[\"score\"]}')
        print(f'can-proceed={\"true\" if report[\"score\"] >= 70 else \"false\"}')
        " | tee -a $GITHUB_OUTPUT
    
    - name: 📊 上传健康报告
      uses: actions/upload-artifact@v3
      with:
        name: health-report
        path: health-report.json
    
    - name: 🚨 风险评估
      run: |
        SCORE=${{ steps.health-check.outputs.score }}
        if [ "$SCORE" -lt 50 ]; then
          echo "🔥 风险评分过低 ($SCORE/100)，禁止继续构建"
          exit 1
        elif [ "$SCORE" -lt 70 ]; then
          echo "⚠️ 存在中等风险 ($SCORE/100)，将尝试自动修复"
        else
          echo "✅ 风险评分良好 ($SCORE/100)，可以安全构建"
        fi

  # ===== 第二阶段：自动修复 =====
  auto-fix:
    name: 🔧 自动问题修复
    runs-on: ubuntu-latest
    needs: pre-validation
    if: needs.pre-validation.outputs.risk-score < 70 && needs.pre-validation.outputs.risk-score >= 50
    timeout-minutes: 10
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🔧 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 安装依赖
      run: |
        pip install -r requirements-dev.txt
        pip install requests pyyaml docker
    
    - name: 🤖 执行自动修复
      run: |
        echo "🔧 开始自动修复问题..."
        python -c "
        from aiculture.cicd_guardian import auto_fix_cicd_issues
        import json
        
        result = auto_fix_cicd_issues('.')
        print(f'修复结果: 成功 {len(result[\"fixed\"])}, 失败 {len(result[\"failed\"])}')
        print(f'成功率: {result[\"success_rate\"]:.1%}')
        
        if result['fixed']:
            print('已修复的问题:')
            for issue in result['fixed']:
                print(f'  ✅ {issue}')
        
        if result['failed']:
            print('未能修复的问题:')
            for issue in result['failed']:
                print(f'  ❌ {issue}')
        "
    
    - name: 📝 提交修复
      run: |
        git config --global user.name 'AI Culture Bot'
        git config --global user.email 'ai-culture@noreply.github.com'
        
        if git diff --quiet; then
          echo "没有需要提交的修复"
        else
          git add .
          git commit -m "🤖 AI自动修复CI/CD问题
          
          - 修复了构建风险问题
          - 优化了配置文件
          - 提高了构建成功率
          
          Co-authored-by: AI Culture System <ai-culture@noreply.github.com>"
          git push
          echo "✅ 修复已提交"
        fi

  # ===== 第三阶段：测试 =====
  test:
    name: 🧪 代码测试
    runs-on: ubuntu-latest
    needs: pre-validation
    if: always() && needs.pre-validation.outputs.can-proceed == 'true'
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
      fail-fast: false  # 一个版本失败不影响其他版本
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
    
    - name: 🔧 设置Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 安装依赖（带重试）
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 3
        command: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
    
    - name: 🔍 代码质量检查
      run: |
        echo "🔍 执行代码质量检查..."
        
        # 代码格式检查
        black --check . || (echo "❌ 代码格式不规范" && exit 1)
        
        # 导入排序检查
        isort --check-only . || (echo "❌ 导入排序不规范" && exit 1)
        
        # 语法检查
        flake8 . || (echo "❌ 代码语法问题" && exit 1)
        
        # 类型检查
        mypy . || echo "⚠️ 类型检查有警告"
        
        echo "✅ 代码质量检查通过"
    
    - name: 🔒 安全检查
      run: |
        echo "🔒 执行安全检查..."
        
        # 依赖安全检查
        safety check -r requirements.txt || echo "⚠️ 发现依赖安全问题"
        
        # 代码安全检查
        bandit -r . -f json -o bandit-report.json || echo "⚠️ 发现代码安全问题"
        
        echo "✅ 安全检查完成"
    
    - name: 🧪 运行测试
      run: |
        echo "🧪 执行单元测试..."
        pytest --cov=aiculture --cov-report=xml --cov-report=term-missing -v
    
    - name: 📊 上传覆盖率报告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # ===== 第四阶段：构建镜像 =====
  build-image:
    name: 🐳 构建Docker镜像
    runs-on: ubuntu-latest
    needs: [pre-validation, test]
    if: always() && needs.pre-validation.outputs.can-proceed == 'true' && needs.test.result == 'success'
    timeout-minutes: 45
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
      fail-fast: false
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
    
    - name: 💾 检查磁盘空间
      run: |
        echo "💾 检查可用磁盘空间..."
        df -h
        AVAILABLE=$(df / | tail -1 | awk '{print $4}' | sed 's/G//')
        if [ "$AVAILABLE" -lt 10 ]; then
          echo "❌ 磁盘空间不足: ${AVAILABLE}GB"
          exit 1
        fi
        echo "✅ 磁盘空间充足: ${AVAILABLE}GB"
    
    - name: 🔧 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
          
    - name: 🐳 登录Docker Hub（带重试）
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 5
        max_attempts: 3
        command: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
    
    - name: 📋 提取镜像元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
    
    - name: 🧹 清理Docker环境
      run: |
        echo "🧹 清理Docker环境..."
        docker system prune -f --volumes
        docker builder prune -f
    
    - name: 📥 预拉取基础镜像
      run: |
        echo "📥 预拉取基础镜像以提高构建速度..."
        docker pull python:3.10-slim || echo "预拉取失败，构建时重新拉取"
    
    - name: 🔨 构建并推送镜像（带重试）
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 30
        max_attempts: 3
        retry_on: error
        command: |
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --tag ${{ steps.meta.outputs.tags }} \
            --label ${{ steps.meta.outputs.labels }} \
            --cache-from type=gha,scope=${{ matrix.platform }} \
            --cache-to type=gha,mode=max,scope=${{ matrix.platform }} \
            --push \
            --progress=plain \
            .

  # ===== 第五阶段：镜像验证 =====
  verify-image:
    name: ✅ 镜像验证
    runs-on: ubuntu-latest
    needs: build-image
    if: always() && needs.build-image.result == 'success'
    timeout-minutes: 15
    
    steps:
    - name: 🐳 登录Docker Hub
      run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
    
    - name: 📥 拉取镜像
      run: |
        IMAGE_TAG="${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo "📥 拉取镜像: $IMAGE_TAG"
        docker pull $IMAGE_TAG
    
    - name: 🔍 基础功能测试
      run: |
        IMAGE_TAG="${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo "🔍 测试镜像基础功能..."
        
        # 测试镜像启动
        docker run --rm $IMAGE_TAG aiculture --version
        
        # 测试核心功能
        docker run --rm $IMAGE_TAG aiculture list-principles
        
        echo "✅ 镜像功能测试通过"
    
    - name: 📏 镜像大小检查
      run: |
        IMAGE_TAG="${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        SIZE=$(docker image inspect $IMAGE_TAG --format='{{.Size}}')
        SIZE_MB=$((SIZE/1000000))
        echo "📏 镜像大小: ${SIZE_MB}MB"
        
        if [ $SIZE_MB -gt 800 ]; then
          echo "⚠️ 镜像过大: ${SIZE_MB}MB (建议<800MB)"
          # 不要失败，只是警告
        else
          echo "✅ 镜像大小合理: ${SIZE_MB}MB"
        fi
    
    - name: 🔒 安全扫描
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'  # 不因安全问题失败，但会记录
        severity: 'CRITICAL,HIGH'
    
    - name: 📊 上传安全扫描结果
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ===== 第六阶段：部署决策 =====
  deployment-gate:
    name: 🚪 部署决策门
    runs-on: ubuntu-latest
    needs: [verify-image, test]
    if: always()
    timeout-minutes: 5
    outputs:
      should-deploy: ${{ steps.decision.outputs.should-deploy }}
    
    steps:
    - name: 📊 汇总构建结果
      id: decision
      run: |
        echo "📊 汇总所有阶段结果..."
        
        TEST_RESULT="${{ needs.test.result }}"
        BUILD_RESULT="${{ needs.build-image.result }}"
        VERIFY_RESULT="${{ needs.verify-image.result }}"
        
        echo "测试结果: $TEST_RESULT"
        echo "构建结果: $BUILD_RESULT"
        echo "验证结果: $VERIFY_RESULT"
        
        if [ "$TEST_RESULT" == "success" ] && \
           [ "$BUILD_RESULT" == "success" ] && \
           [ "$VERIFY_RESULT" == "success" ]; then
          echo "✅ 所有检查通过，可以部署"
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "❌ 存在失败的检查，不能部署"
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi

  # ===== 第七阶段：故障恢复 =====
  failure-recovery:
    name: 🚨 故障恢复
    runs-on: ubuntu-latest
    needs: [pre-validation, test, build-image, verify-image]
    if: failure()
    timeout-minutes: 10
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
    
    - name: 🔍 故障分析
      run: |
        echo "🔍 分析构建失败原因..."
        
        echo "各阶段状态:"
        echo "预检测: ${{ needs.pre-validation.result }}"
        echo "测试: ${{ needs.test.result }}"
        echo "构建: ${{ needs.build-image.result }}"
        echo "验证: ${{ needs.verify-image.result }}"
        
        # 生成故障报告
        cat << EOF > failure-report.md
        # 🚨 CI/CD 构建失败报告
        
        **时间**: $(date)
        **分支**: ${{ github.ref_name }}
        **提交**: ${{ github.sha }}
        **触发者**: ${{ github.actor }}
        
        ## 失败阶段
        - 预检测: ${{ needs.pre-validation.result }}
        - 测试: ${{ needs.test.result }}
        - 构建: ${{ needs.build-image.result }}
        - 验证: ${{ needs.verify-image.result }}
        
        ## 建议措施
        1. 检查代码质量和依赖
        2. 运行本地测试确保通过
        3. 检查Docker配置
        4. 查看详细日志: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        
        EOF
        
        cat failure-report.md
    
    - name: 🔄 尝试自动回滚
      if: github.ref == 'refs/heads/main'
      run: |
        echo "🔄 尝试自动回滚到最后一个稳定版本..."
        
        # 这里可以添加自动回滚逻辑
        # 例如：回滚到上一个成功的镜像标签
        echo "回滚逻辑需要根据具体部署环境实现"
    
    - name: 📢 发送通知
      run: |
        echo "📢 发送失败通知..."
        
        MESSAGE="🚨 AICultureKit CI/CD 构建失败
        
        📋 详情:
        - 分支: ${{ github.ref_name }}
        - 提交: ${{ github.sha }}
        - 作者: ${{ github.actor }}
        - 时间: $(date)
        - 日志: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        
        🤖 请按AI开发文化原则进行修复"
        
        echo "$MESSAGE"
        
        # 如果配置了Webhook，可以发送通知
        if [ -n "${{ secrets.TEAM_WEBHOOK }}" ]; then
          curl -X POST "${{ secrets.TEAM_WEBHOOK }}" \
            -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE\"}" || echo "通知发送失败"
        fi

  # ===== 第八阶段：成功后处理 =====
  post-success:
    name: 🎉 成功后处理
    runs-on: ubuntu-latest
    needs: [deployment-gate]
    if: needs.deployment-gate.outputs.should-deploy == 'true'
    timeout-minutes: 5
    
    steps:
    - name: 📊 记录成功指标
      run: |
        echo "🎉 构建成功完成！"
        echo "✅ 所有质量检查通过"
        echo "✅ 镜像构建成功"
        echo "✅ 安全扫描通过"
        echo "🚀 准备部署"
    
    - name: 📈 更新指标
      run: |
        echo "📈 更新构建成功率指标..."
        # 这里可以集成监控系统
        echo "构建成功时间: $(date)"
        echo "Git SHA: ${{ github.sha }}"
    
    - name: 🎊 发送成功通知
      run: |
        echo "🎊 发送成功通知..."
        
        MESSAGE="🎉 AICultureKit 构建成功！
        
        ✅ 所有检查通过
        🐳 镜像已就绪
        🚀 可以部署
        
        分支: ${{ github.ref_name }}
        提交: ${{ github.sha }}
        "
        
        echo "$MESSAGE" 