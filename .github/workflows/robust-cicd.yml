name: Robust CI/CD Pipeline
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - develop
    tags:
      - v*
  workflow_dispatch:
    inputs:
      environment:
        default: staging
        description: "部署环境"
        options:
          - staging
          - production
        required: true
        type: choice
      force_rebuild:
        default: false
        description: "强制重建（跳过缓存）"
        required: false
        type: boolean
env:
  IMAGE_NAME: aiculture-kit
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"
  REGISTRY: docker.io
jobs:
  auto-fix:
    if:
      needs.pre-validation.outputs.risk-score < 70 && needs.pre-validation.outputs.risk-score
      >= 50
    name: "\U0001F527 \u81EA\u52A8\u95EE\u9898\u4FEE\u590D"
    needs: pre-validation
    runs-on: ubuntu-latest
    steps:
      - name: "\U0001F4E5 \u68C0\u51FA\u4EE3\u7801"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: "\U0001F527 \u8BBE\u7F6EPython\u73AF\u5883"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: "\U0001F4E6 \u5B89\u88C5\u4F9D\u8D56"
        run: "pip install -r requirements-dev.txt

          pip install requests pyyaml docker

          "
      - name: "\U0001F916 \u6267\u884C\u81EA\u52A8\u4FEE\u590D"
        run:
          "echo \"\U0001F527 \u5F00\u59CB\u81EA\u52A8\u4FEE\u590D\u95EE\u9898...\"\
          \npython -c \"\nfrom aiculture.cicd_guardian import auto_fix_cicd_issues\n\
          import json\n\nresult = auto_fix_cicd_issues('.')\nprint(f'\u4FEE\u590D\u7ED3\
          \u679C: \u6210\u529F {len(result[\\\"fixed\\\"])}, \u5931\u8D25 {len(result[\\\
          \"failed\\\"])}')\nprint(f'\u6210\u529F\u7387: {result[\\\"success_rate\\\"\
          ]:.1%}')\n\nif result['fixed']:\n    print('\u5DF2\u4FEE\u590D\u7684\u95EE\
          \u9898:')\n    for issue in result['fixed']:\n        print(f'  \u2705 {issue}')\n\
          \nif result['failed']:\n    print('\u672A\u80FD\u4FEE\u590D\u7684\u95EE\u9898\
          :')\n    for issue in result['failed']:\n        print(f'  \u274C {issue}')\n\
          \"\n"
      - name: "\U0001F4DD \u63D0\u4EA4\u4FEE\u590D"
        run:
          "git config --global user.name 'AI Culture Bot'\ngit config --global user.email\
          \ 'ai-culture@noreply.github.com'\n\nif git diff --quiet; then\n  echo \"\u6CA1\
          \u6709\u9700\u8981\u63D0\u4EA4\u7684\u4FEE\u590D\"\nelse\n  git add .\n  git\
          \ commit -m \"\U0001F916 AI\u81EA\u52A8\u4FEE\u590DCI/CD\u95EE\u9898\n  \n\
          \  - \u4FEE\u590D\u4E86\u6784\u5EFA\u98CE\u9669\u95EE\u9898\n  - \u4F18\u5316\
          \u4E86\u914D\u7F6E\u6587\u4EF6\n  - \u63D0\u9AD8\u4E86\u6784\u5EFA\u6210\u529F\
          \u7387\n  \n  Co-authored-by: AI Culture System <ai-culture@noreply.github.com>\"\
          \n  git push\n  echo \"\u2705 \u4FEE\u590D\u5DF2\u63D0\u4EA4\"\nfi\n"
    timeout-minutes: 10
  build-image:
    if:
      always() && needs.pre-validation.outputs.can-proceed == 'true' && needs.test.result
      == 'success'
    name: "\U0001F433 \u6784\u5EFADocker\u955C\u50CF"
    needs:
      - pre-validation
      - test
    runs-on: ubuntu-latest
    steps:
      - name: "\U0001F4E5 \u68C0\u51FA\u4EE3\u7801"
        uses: actions/checkout@v4
      - name: "\U0001F4BE \u68C0\u67E5\u78C1\u76D8\u7A7A\u95F4"
        run:
          "echo \"\U0001F4BE \u68C0\u67E5\u53EF\u7528\u78C1\u76D8\u7A7A\u95F4...\"\
          \ndf -h\nAVAILABLE=$(df / | tail -1 | awk '{print $4}' | sed 's/G//')\nif\
          \ [ \"$AVAILABLE\" -lt 10 ]; then\n  echo \"\u274C \u78C1\u76D8\u7A7A\u95F4\
          \u4E0D\u8DB3: ${AVAILABLE}GB\"\n  exit 1\nfi\necho \"\u2705 \u78C1\u76D8\u7A7A\
          \u95F4\u5145\u8DB3: ${AVAILABLE}GB\"\n"
      - name: "\U0001F527 \u8BBE\u7F6EDocker Buildx"
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: "network=host

            "
      - name: "\U0001F433 \u767B\u5F55Docker Hub\uFF08\u5E26\u91CD\u8BD5\uFF09"
        uses: nick-fields/retry@v2
        with:
          command:
            "echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME
            }} --password-stdin

            "
          max_attempts: 3
          timeout_minutes: 5
      - id: meta
        name: "\U0001F4CB \u63D0\u53D6\u955C\u50CF\u5143\u6570\u636E"
        uses: docker/metadata-action@v5
        with:
          images:
            ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME
            }}
          tags: "type=ref,event=branch

            type=ref,event=pr

            type=semver,pattern={{version}}

            type=semver,pattern={{major}}.{{minor}}

            type=raw,value=latest,enable={{is_default_branch}}

            type=sha,prefix={{branch}}-

            "
      - name: "\U0001F9F9 \u6E05\u7406Docker\u73AF\u5883"
        run:
          "echo \"\U0001F9F9 \u6E05\u7406Docker\u73AF\u5883...\"\ndocker system prune\
          \ -f --volumes\ndocker builder prune -f\n"
      - name: "\U0001F4E5 \u9884\u62C9\u53D6\u57FA\u7840\u955C\u50CF"
        run:
          "echo \"\U0001F4E5 \u9884\u62C9\u53D6\u57FA\u7840\u955C\u50CF\u4EE5\u63D0\
          \u9AD8\u6784\u5EFA\u901F\u5EA6...\"\ndocker pull python:3.10-slim || echo\
          \ \"\u9884\u62C9\u53D6\u5931\u8D25\uFF0C\u6784\u5EFA\u65F6\u91CD\u65B0\u62C9\
          \u53D6\"\n"
      - name:
          "\U0001F528 \u6784\u5EFA\u5E76\u63A8\u9001\u955C\u50CF\uFF08\u5E26\u91CD\
          \u8BD5\uFF09"
        uses: nick-fields/retry@v2
        with:
          command:
            "docker buildx build \\\n  --platform ${{ matrix.platform }} \\\n\
            \  --tag ${{ steps.meta.outputs.tags }} \\\n  --label ${{ steps.meta.outputs.labels\
            \ }} \\\n  --cache-from type=gha,scope=${{ matrix.platform }} \\\n  --cache-to\
            \ type=gha,mode=max,scope=${{ matrix.platform }} \\\n  --push \\\n  --progress=plain\
            \ \\\n  .\n"
          max_attempts: 3
          retry_on: error
          timeout_minutes: 30
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    timeout-minutes: 45
  deployment-gate:
    if: always()
    name: "\U0001F6AA \u90E8\u7F72\u51B3\u7B56\u95E8"
    needs:
      - verify-image
      - test
    outputs:
      should-deploy: ${{ steps.decision.outputs.should-deploy }}
    runs-on: ubuntu-latest
    steps:
      - id: decision
        name: "\U0001F4CA \u6C47\u603B\u6784\u5EFA\u7ED3\u679C"
        run:
          "echo \"\U0001F4CA \u6C47\u603B\u6240\u6709\u9636\u6BB5\u7ED3\u679C...\"\
          \n\nTEST_RESULT=\"${{ needs.test.result }}\"\nBUILD_RESULT=\"${{ needs.build-image.result\
          \ }}\"\nVERIFY_RESULT=\"${{ needs.verify-image.result }}\"\n\necho \"\u6D4B\
          \u8BD5\u7ED3\u679C: $TEST_RESULT\"\necho \"\u6784\u5EFA\u7ED3\u679C: $BUILD_RESULT\"\
          \necho \"\u9A8C\u8BC1\u7ED3\u679C: $VERIFY_RESULT\"\n\nif [ \"$TEST_RESULT\"\
          \ == \"success\" ] && \\\n   [ \"$BUILD_RESULT\" == \"success\" ] && \\\n\
          \   [ \"$VERIFY_RESULT\" == \"success\" ]; then\n  echo \"\u2705 \u6240\u6709\
          \u68C0\u67E5\u901A\u8FC7\uFF0C\u53EF\u4EE5\u90E8\u7F72\"\n  echo \"should-deploy=true\"\
          \ >> $GITHUB_OUTPUT\nelse\n  echo \"\u274C \u5B58\u5728\u5931\u8D25\u7684\u68C0\
          \u67E5\uFF0C\u4E0D\u80FD\u90E8\u7F72\"\n  echo \"should-deploy=false\" >>\
          \ $GITHUB_OUTPUT\nfi\n"
    timeout-minutes: 5
  failure-recovery:
    if: failure()
    name: "\U0001F6A8 \u6545\u969C\u6062\u590D"
    needs:
      - pre-validation
      - test
      - build-image
      - verify-image
    runs-on: ubuntu-latest
    steps:
      - name: "\U0001F4E5 \u68C0\u51FA\u4EE3\u7801"
        uses: actions/checkout@v4
      - name: "\U0001F50D \u6545\u969C\u5206\u6790"
        run:
          "echo \"\U0001F50D \u5206\u6790\u6784\u5EFA\u5931\u8D25\u539F\u56E0...\"\
          \n\necho \"\u5404\u9636\u6BB5\u72B6\u6001:\"\necho \"\u9884\u68C0\u6D4B: ${{\
          \ needs.pre-validation.result }}\"\necho \"\u6D4B\u8BD5: ${{ needs.test.result\
          \ }}\"\necho \"\u6784\u5EFA: ${{ needs.build-image.result }}\"\necho \"\u9A8C\
          \u8BC1: ${{ needs.verify-image.result }}\"\n\n# \u751F\u6210\u6545\u969C\u62A5\
          \u544A\ncat << EOF > failure-report.md\n# \U0001F6A8 CI/CD \u6784\u5EFA\u5931\
          \u8D25\u62A5\u544A\n\n**\u65F6\u95F4**: $(date)\n**\u5206\u652F**: ${{ github.ref_name\
          \ }}\n**\u63D0\u4EA4**: ${{ github.sha }}\n**\u89E6\u53D1\u8005**: ${{ github.actor\
          \ }}\n\n## \u5931\u8D25\u9636\u6BB5\n- \u9884\u68C0\u6D4B: ${{ needs.pre-validation.result\
          \ }}\n- \u6D4B\u8BD5: ${{ needs.test.result }}\n- \u6784\u5EFA: ${{ needs.build-image.result\
          \ }}\n- \u9A8C\u8BC1: ${{ needs.verify-image.result }}\n\n## \u5EFA\u8BAE\u63AA\
          \u65BD\n1. \u68C0\u67E5\u4EE3\u7801\u8D28\u91CF\u548C\u4F9D\u8D56\n2. \u8FD0\
          \u884C\u672C\u5730\u6D4B\u8BD5\u786E\u4FDD\u901A\u8FC7\n3. \u68C0\u67E5Docker\u914D\
          \u7F6E\n4. \u67E5\u770B\u8BE6\u7EC6\u65E5\u5FD7: ${{ github.server_url }}/${{\
          \ github.repository }}/actions/runs/${{ github.run_id }}\n\nEOF\n\ncat failure-report.md\n"
      - if: github.ref == 'refs/heads/main'
        name: "\U0001F504 \u5C1D\u8BD5\u81EA\u52A8\u56DE\u6EDA"
        run:
          "echo \"\U0001F504 \u5C1D\u8BD5\u81EA\u52A8\u56DE\u6EDA\u5230\u6700\u540E\
          \u4E00\u4E2A\u7A33\u5B9A\u7248\u672C...\"\n\n# \u8FD9\u91CC\u53EF\u4EE5\u6DFB\
          \u52A0\u81EA\u52A8\u56DE\u6EDA\u903B\u8F91\n# \u4F8B\u5982\uFF1A\u56DE\u6EDA\
          \u5230\u4E0A\u4E00\u4E2A\u6210\u529F\u7684\u955C\u50CF\u6807\u7B7E\necho \"\
          \u56DE\u6EDA\u903B\u8F91\u9700\u8981\u6839\u636E\u5177\u4F53\u90E8\u7F72\u73AF\
          \u5883\u5B9E\u73B0\"\n"
      - name: "\U0001F4E2 \u53D1\u9001\u901A\u77E5"
        run:
          "echo \"\U0001F4E2 \u53D1\u9001\u5931\u8D25\u901A\u77E5...\"\n\nMESSAGE=\"\
          \U0001F6A8 AICultureKit CI/CD \u6784\u5EFA\u5931\u8D25\n\n\U0001F4CB \u8BE6\
          \u60C5:\n- \u5206\u652F: ${{ github.ref_name }}\n- \u63D0\u4EA4: ${{ github.sha\
          \ }}\n- \u4F5C\u8005: ${{ github.actor }}\n- \u65F6\u95F4: $(date)\n- \u65E5\
          \u5FD7: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{\
          \ github.run_id }}\n\n\U0001F916 \u8BF7\u6309AI\u5F00\u53D1\u6587\u5316\u539F\
          \u5219\u8FDB\u884C\u4FEE\u590D\"\n\necho \"$MESSAGE\"\n\n# \u5982\u679C\u914D\
          \u7F6E\u4E86Webhook\uFF0C\u53EF\u4EE5\u53D1\u9001\u901A\u77E5\nif [ -n \"\
          ${{ secrets.TEAM_WEBHOOK }}\" ]; then\n  curl -X POST \"${{ secrets.TEAM_WEBHOOK\
          \ }}\" \\\n    -H 'Content-type: application/json' \\\n    --data \"{\\\"\
          text\\\":\\\"$MESSAGE\\\"}\" || echo \"\u901A\u77E5\u53D1\u9001\u5931\u8D25\
          \"\nfi\n"
    timeout-minutes: 10
  post-success:
    if: needs.deployment-gate.outputs.should-deploy == 'true'
    name: "\U0001F389 \u6210\u529F\u540E\u5904\u7406"
    needs:
      - deployment-gate
    runs-on: ubuntu-latest
    steps:
      - name: "\U0001F4CA \u8BB0\u5F55\u6210\u529F\u6307\u6807"
        run:
          "echo \"\U0001F389 \u6784\u5EFA\u6210\u529F\u5B8C\u6210\uFF01\"\necho \"\
          \u2705 \u6240\u6709\u8D28\u91CF\u68C0\u67E5\u901A\u8FC7\"\necho \"\u2705 \u955C\
          \u50CF\u6784\u5EFA\u6210\u529F\"\necho \"\u2705 \u5B89\u5168\u626B\u63CF\u901A\
          \u8FC7\"\necho \"\U0001F680 \u51C6\u5907\u90E8\u7F72\"\n"
      - name: "\U0001F4C8 \u66F4\u65B0\u6307\u6807"
        run:
          "echo \"\U0001F4C8 \u66F4\u65B0\u6784\u5EFA\u6210\u529F\u7387\u6307\u6807\
          ...\"\n# \u8FD9\u91CC\u53EF\u4EE5\u96C6\u6210\u76D1\u63A7\u7CFB\u7EDF\necho\
          \ \"\u6784\u5EFA\u6210\u529F\u65F6\u95F4: $(date)\"\necho \"Git SHA: ${{ github.sha\
          \ }}\"\n"
      - name: "\U0001F38A \u53D1\u9001\u6210\u529F\u901A\u77E5"
        run:
          "echo \"\U0001F38A \u53D1\u9001\u6210\u529F\u901A\u77E5...\"\n\nMESSAGE=\"\
          \U0001F389 AICultureKit \u6784\u5EFA\u6210\u529F\uFF01\n\n\u2705 \u6240\u6709\
          \u68C0\u67E5\u901A\u8FC7\n\U0001F433 \u955C\u50CF\u5DF2\u5C31\u7EEA\n\U0001F680\
          \ \u53EF\u4EE5\u90E8\u7F72\n\n\u5206\u652F: ${{ github.ref_name }}\n\u63D0\
          \u4EA4: ${{ github.sha }}\n\"\n\necho \"$MESSAGE\" "
    timeout-minutes: 5
  pre-validation:
    name: "\U0001F50D \u6784\u5EFA\u524D\u9884\u68C0\u6D4B"
    outputs:
      can-proceed: ${{ steps.health-check.outputs.can-proceed }}
      risk-score: ${{ steps.health-check.outputs.score }}
    runs-on: ubuntu-latest
    steps:
      - name: "\U0001F4E5 \u68C0\u51FA\u4EE3\u7801"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "\U0001F527 \u8BBE\u7F6EPython\u73AF\u5883"
        uses: actions/setup-python@v4
        with:
          cache: pip
          python-version: ${{ env.PYTHON_VERSION }}
      - name: "\U0001F4E6 \u5B89\u88C5\u4F9D\u8D56"
        run: "python -m pip install --upgrade pip

          pip install -r requirements-dev.txt

          pip install requests pyyaml docker

          "
      - id: ai-culture-check
        name: "\U0001F916 AI\u5F00\u53D1\u6587\u5316\u68C0\u67E5"
        run:
          "echo \"\U0001F916 \u6267\u884CAI\u5F00\u53D1\u6587\u5316\u539F\u5219\u68C0\
          \u67E5...\"\npython -m aiculture.cli validate --path .\necho \"culture-check=$?\"\
          \ >> $GITHUB_OUTPUT\n"
      - id: health-check
        name: "\U0001F50D CI/CD\u5065\u5EB7\u68C0\u67E5"
        run:
          "echo \"\U0001F50D \u6267\u884C\u5168\u9762\u5065\u5EB7\u68C0\u67E5...\"\
          \npython -c \"\nfrom aiculture.cicd_guardian import run_cicd_health_check\n\
          import json\n\nreport = run_cicd_health_check('.')\nprint(f'\u5065\u5EB7\u68C0\
          \u67E5\u5B8C\u6210\uFF0C\u98CE\u9669\u8BC4\u5206: {report[\\\"score\\\"]}/100')\n\
          print(f'\u98CE\u9669\u7EDF\u8BA1: {report[\\\"risk_summary\\\"]}')\n\n# \u8F93\
          \u51FA\u7ED3\u679C\u5230GitHub Actions\nwith open('health-report.json', 'w')\
          \ as f:\n    json.dump(report, f, indent=2)\n\n# \u8BBE\u7F6E\u8F93\u51FA\u53D8\
          \u91CF\nprint(f'score={report[\\\"score\\\"]}')\nprint(f'can-proceed={\\\"\
          true\\\" if report[\\\"score\\\"] >= 70 else \\\"false\\\"}')\n\" | tee -a\
          \ $GITHUB_OUTPUT\n"
      - name: "\U0001F4CA \u4E0A\u4F20\u5065\u5EB7\u62A5\u544A"
        uses: actions/upload-artifact@v3
        with:
          name: health-report
          path: health-report.json
      - name: "\U0001F6A8 \u98CE\u9669\u8BC4\u4F30"
        run:
          "SCORE=${{ steps.health-check.outputs.score }}\nif [ \"$SCORE\" -lt 50\
          \ ]; then\n  echo \"\U0001F525 \u98CE\u9669\u8BC4\u5206\u8FC7\u4F4E ($SCORE/100)\uFF0C\
          \u7981\u6B62\u7EE7\u7EED\u6784\u5EFA\"\n  exit 1\nelif [ \"$SCORE\" -lt 70\
          \ ]; then\n  echo \"\u26A0\uFE0F \u5B58\u5728\u4E2D\u7B49\u98CE\u9669 ($SCORE/100)\uFF0C\
          \u5C06\u5C1D\u8BD5\u81EA\u52A8\u4FEE\u590D\"\nelse\n  echo \"\u2705 \u98CE\
          \u9669\u8BC4\u5206\u826F\u597D ($SCORE/100)\uFF0C\u53EF\u4EE5\u5B89\u5168\u6784\
          \u5EFA\"\nfi\n"
    timeout-minutes: 15
  test:
    if: always() && needs.pre-validation.outputs.can-proceed == 'true'
    name: "\U0001F9EA \u4EE3\u7801\u6D4B\u8BD5"
    needs: pre-validation
    runs-on: ubuntu-latest
    steps:
      - name: "\U0001F4E5 \u68C0\u51FA\u4EE3\u7801"
        uses: actions/checkout@v4
      - name: "\U0001F527 \u8BBE\u7F6EPython ${{ matrix.python-version }}"
        uses: actions/setup-python@v4
        with:
          cache: pip
          python-version: ${{ matrix.python-version }}
      - name: "\U0001F4E6 \u5B89\u88C5\u4F9D\u8D56\uFF08\u5E26\u91CD\u8BD5\uFF09"
        uses: nick-fields/retry@v2
        with:
          command: "python -m pip install --upgrade pip

            pip install -r requirements-dev.txt

            "
          max_attempts: 3
          timeout_minutes: 10
      - name: "\U0001F50D \u4EE3\u7801\u8D28\u91CF\u68C0\u67E5"
        run:
          "echo \"\U0001F50D \u6267\u884C\u4EE3\u7801\u8D28\u91CF\u68C0\u67E5...\"\
          \n\n# \u4EE3\u7801\u683C\u5F0F\u68C0\u67E5\nblack --check . || (echo \"\u274C\
          \ \u4EE3\u7801\u683C\u5F0F\u4E0D\u89C4\u8303\" && exit 1)\n\n# \u5BFC\u5165\
          \u6392\u5E8F\u68C0\u67E5\nisort --check-only . || (echo \"\u274C \u5BFC\u5165\
          \u6392\u5E8F\u4E0D\u89C4\u8303\" && exit 1)\n\n# \u8BED\u6CD5\u68C0\u67E5\n\
          flake8 . || (echo \"\u274C \u4EE3\u7801\u8BED\u6CD5\u95EE\u9898\" && exit\
          \ 1)\n\n# \u7C7B\u578B\u68C0\u67E5\nmypy . || echo \"\u26A0\uFE0F \u7C7B\u578B\
          \u68C0\u67E5\u6709\u8B66\u544A\"\n\necho \"\u2705 \u4EE3\u7801\u8D28\u91CF\
          \u68C0\u67E5\u901A\u8FC7\"\n"
      - name: "\U0001F512 \u5B89\u5168\u68C0\u67E5"
        run:
          "echo \"\U0001F512 \u6267\u884C\u5B89\u5168\u68C0\u67E5...\"\n\n# \u4F9D\
          \u8D56\u5B89\u5168\u68C0\u67E5\nsafety check -r requirements.txt || echo \"\
          \u26A0\uFE0F \u53D1\u73B0\u4F9D\u8D56\u5B89\u5168\u95EE\u9898\"\n\n# \u4EE3\
          \u7801\u5B89\u5168\u68C0\u67E5\nbandit -r . -f json -o bandit-report.json\
          \ || echo \"\u26A0\uFE0F \u53D1\u73B0\u4EE3\u7801\u5B89\u5168\u95EE\u9898\"\
          \n\necho \"\u2705 \u5B89\u5168\u68C0\u67E5\u5B8C\u6210\"\n"
      - name: "\U0001F9EA \u8FD0\u884C\u6D4B\u8BD5"
        run:
          "echo \"\U0001F9EA \u6267\u884C\u5355\u5143\u6D4B\u8BD5...\"\npytest --cov=aiculture\
          \ --cov-report=xml --cov-report=term-missing -v\n"
      - name: "\U0001F4CA \u4E0A\u4F20\u8986\u76D6\u7387\u62A5\u544A"
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false
          file: ./coverage.xml
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
    timeout-minutes: 20
  verify-image:
    if: always() && needs.build-image.result == 'success'
    name: "\u2705 \u955C\u50CF\u9A8C\u8BC1"
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: "\U0001F433 \u767B\u5F55Docker Hub"
        run:
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME
          }} --password-stdin
      - name: "\U0001F4E5 \u62C9\u53D6\u955C\u50CF"
        run:
          "IMAGE_TAG=\"${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{\
          \ env.IMAGE_NAME }}:latest\"\necho \"\U0001F4E5 \u62C9\u53D6\u955C\u50CF:\
          \ $IMAGE_TAG\"\ndocker pull $IMAGE_TAG\n"
      - name: "\U0001F50D \u57FA\u7840\u529F\u80FD\u6D4B\u8BD5"
        run:
          "IMAGE_TAG=\"${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{\
          \ env.IMAGE_NAME }}:latest\"\necho \"\U0001F50D \u6D4B\u8BD5\u955C\u50CF\u57FA\
          \u7840\u529F\u80FD...\"\n\n# \u6D4B\u8BD5\u955C\u50CF\u542F\u52A8\ndocker\
          \ run --rm $IMAGE_TAG aiculture --version\n\n# \u6D4B\u8BD5\u6838\u5FC3\u529F\
          \u80FD\ndocker run --rm $IMAGE_TAG aiculture list-principles\n\necho \"\u2705\
          \ \u955C\u50CF\u529F\u80FD\u6D4B\u8BD5\u901A\u8FC7\"\n"
      - name: "\U0001F4CF \u955C\u50CF\u5927\u5C0F\u68C0\u67E5"
        run:
          "IMAGE_TAG=\"${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{\
          \ env.IMAGE_NAME }}:latest\"\nSIZE=$(docker image inspect $IMAGE_TAG --format='{{.Size}}')\n\
          SIZE_MB=$((SIZE/1000000))\necho \"\U0001F4CF \u955C\u50CF\u5927\u5C0F: ${SIZE_MB}MB\"\
          \n\nif [ $SIZE_MB -gt 800 ]; then\n  echo \"\u26A0\uFE0F \u955C\u50CF\u8FC7\
          \u5927: ${SIZE_MB}MB (\u5EFA\u8BAE<800MB)\"\n  # \u4E0D\u8981\u5931\u8D25\uFF0C\
          \u53EA\u662F\u8B66\u544A\nelse\n  echo \"\u2705 \u955C\u50CF\u5927\u5C0F\u5408\
          \u7406: ${SIZE_MB}MB\"\nfi\n"
      - name: "\U0001F512 \u5B89\u5168\u626B\u63CF"
        uses: aquasecurity/trivy-action@master
        with:
          exit-code: "0"
          format: sarif
          image-ref:
            ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME
            }}:latest
          output: trivy-results.sarif
          severity: CRITICAL,HIGH
      - if: always()
        name: "\U0001F4CA \u4E0A\u4F20\u5B89\u5168\u626B\u63CF\u7ED3\u679C"
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif
    timeout-minutes: 15
