name: CI
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - develop
jobs:
  build-package:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Set enforcement mode by branch
        id: set-mode
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          if [[ "$BRANCH" == "main" || "$BRANCH" == release/* ]]; then
            echo "mode=block" >> "$GITHUB_OUTPUT"
          else
            echo "mode=warn" >> "$GITHUB_OUTPUT"
          fi
          echo "AICULTURE_ENFORCE_BLOCKING=${{ steps.set-mode.outputs.mode }}" >> "$GITHUB_ENV"

      - name: Show enforcement mode
        run: echo "AICULTURE_ENFORCE_BLOCKING=$AICULTURE_ENFORCE_BLOCKING"

      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install build dependencies
        run: "python -m pip install --upgrade pip

          pip install build

          "
      - name: Build package
        run: python -m build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
    timeout-minutes: 30
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Set enforcement mode by branch
        id: set-mode
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          if [[ "$BRANCH" == "main" || "$BRANCH" == release/* ]]; then
            echo "mode=block" >> "$GITHUB_OUTPUT"
          else
            echo "mode=warn" >> "$GITHUB_OUTPUT"
          fi
          echo "AICULTURE_ENFORCE_BLOCKING=${{ steps.set-mode.outputs.mode }}" >> "$GITHUB_ENV"

      - name: Show enforcement mode
        run: echo "AICULTURE_ENFORCE_BLOCKING=$AICULTURE_ENFORCE_BLOCKING"
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          path: ~/.cache/pip
          restore-keys: "${{ runner.os }}-pip-

            "
      - name: Install dependencies
        run: "python -m pip install --upgrade pip

          pip install -r requirements-dev.txt

          "
      - name: Lint with flake8
        run:
          "# stop the build if there are Python syntax errors or undefined names

          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars
          wide

          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

          "
      - name: Type check with mypy
        run: mypy .
      - name: Format check with black
        run: black --check .
      - name: Import sort check with isort
        run: isort --check-only .
      - name: Security check with bandit
        run: bandit -r . -f json -o bandit-report.json || true
      - name: Test with pytest
        run: "pytest --cov=aiculture --cov-report=xml --cov-report=term-missing

          "
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false
          file: ./coverage.xml
    strategy:
      matrix:
        python-version:
          - 3.8
          - 3.9
          - "3.10"
          - "3.11"
    timeout-minutes: 30
