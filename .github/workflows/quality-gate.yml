name: "üõ°Ô∏è Quality Gate"

permissions:
  contents: read

on:
  pull_request:
    branches:
      - "main"
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - "README.md"
      - "docs/**"
      - "*.md"
      - "WORKFLOW_TEST.md"
      - "workflow_test_log.md"

concurrency:
  group: quality-gate-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  SOFT_FAIL: true # ËΩØÂ§±Ë¥•ÂºÄÂÖ≥Ôºötrue=Âä°ÂÆûÁ≠ñÁï•ÔºåÂÖàË∑ëÈÄöÊµÅÁ®ã
  COVERAGE_THRESHOLD_MIN: 9 # Ë¶ÜÁõñÁéáÈòàÂÄºÔºàÂåπÈÖçÂΩìÂâçÂÆûÈôÖÊ∞¥Âπ≥Ôºö8.4%ÔºåËÆæÁΩÆ‰∏∫9%Á°Æ‰øùÁ®≥ÂÆöÔºâ
  PYTHON_VERSION: "3.11"

jobs:
  strict-quality-check:
    name: "üõ°Ô∏è Strict Quality Check"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Set enforcement mode by branch
        id: set-mode
        run: |
          BRANCH="${{ github.base_ref }}"
          if [[ "$BRANCH" == "main" || "$BRANCH" == release/* ]]; then
            echo "mode=block" >> "$GITHUB_OUTPUT"
          else
            echo "mode=warn" >> "$GITHUB_OUTPUT"
          fi
          echo "AICULTURE_ENFORCE_BLOCKING=${{ steps.set-mode.outputs.mode }}" >> "$GITHUB_ENV"

      - name: Show enforcement mode
        run: echo "AICULTURE_ENFORCE_BLOCKING=$AICULTURE_ENFORCE_BLOCKING"

      - name: üîç Full lint check (Ruff) - SOFT FAIL
        run: ruff check . --no-fix
        continue-on-error: ${{ env.SOFT_FAIL == 'true' }}

      - name: üîí Security check (Bandit) - SOFT FAIL
        run: bandit -r aiculture --severity-level high
        continue-on-error: ${{ env.SOFT_FAIL == 'true' }}

      - name: üîê Secrets scan (detect-secrets) - SOFT FAIL
        run: detect-secrets scan --baseline .secrets.baseline --all-files
        continue-on-error: ${{ env.SOFT_FAIL == 'true' }}

      - name: üîß Type check (MyPy) - SOFT FAIL
        run: mypy aiculture --ignore-missing-imports
        continue-on-error: ${{ env.SOFT_FAIL == 'true' }}

      - name: üß™ Test with coverage (BLOCKING)
        run: |
          pytest -q --maxfail=1 --disable-warnings \
            --cov=aiculture --cov-report=term-missing \
            --cov-report=json:coverage.json --cov-fail-under=${{ env.COVERAGE_THRESHOLD_MIN }}
