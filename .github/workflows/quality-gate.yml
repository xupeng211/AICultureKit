name: 🚀 AICultureKit Quality Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行完整检查
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  COVERAGE_THRESHOLD: 30

jobs:
  # 🧪 快速质量检查
  quick-check:
    name: 🚀 快速质量检查
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: 🎨 代码格式化检查
      run: |
        black --check --diff .
        isort --check-only --diff .
        
    - name: 🔍 代码质量检查
      run: |
        flake8 . || true  # 不阻塞，仅警告
        
    - name: 🧪 快速测试
      run: |
        pytest tests/ -x --tb=short -q

  # 🔬 完整质量检查
  full-check:
    name: 🔬 完整质量检查
    runs-on: ubuntu-latest
    needs: quick-check
    timeout-minutes: 20
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: 🧪 运行完整测试套件
      run: |
        pytest --cov=aiculture --cov-report=xml --cov-report=term-missing
        
    - name: 📊 上传覆盖率报告
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: 🔧 类型检查
      run: |
        mypy aiculture --ignore-missing-imports || true
        
    - name: 🔒 安全检查
      run: |
        bandit -r aiculture -f json -o bandit-report.json || true
        
    - name: 📋 生成质量报告
      run: |
        python scripts/generate_quality_report.py
        
    - name: 📤 上传质量报告
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality-report.html

  # 🌍 多环境测试
  multi-env-test:
    name: 🌍 多环境测试
    runs-on: ${{ matrix.os }}
    needs: quick-check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        exclude:
          # 减少矩阵大小，只在Ubuntu上测试所有Python版本
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
        
    - name: 🧪 运行核心测试
      run: |
        pytest tests/test_core.py tests/test_culture_enforcer.py -v

  # 🚀 自动修复和PR
  auto-fix:
    name: 🚀 自动修复代码问题
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 安装工具
      run: |
        pip install black isort autoflake
        
    - name: 🔧 自动修复代码
      run: |
        black .
        isort .
        autoflake --in-place --remove-all-unused-imports --recursive .
        
    - name: 📝 提交修复
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        if ! git diff --cached --quiet; then
          git commit -m "🤖 自动修复代码格式和导入问题"
          git push
        fi

  # 📦 自动发布
  auto-release:
    name: 📦 自动发布
    runs-on: ubuntu-latest
    needs: [full-check, multi-env-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 安装构建工具
      run: |
        pip install build twine

    - name: 🏗️ 构建包
      run: |
        python -m build

    - name: 🧪 检查包
      run: |
        twine check dist/*

    - name: 📤 发布到TestPyPI
      if: contains(github.event.head_commit.message, '[release]')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*

  # 📊 质量趋势分析
  quality-trend:
    name: 📊 质量趋势分析
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 安装依赖
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: 📈 生成趋势报告
      run: |
        python scripts/generate_trend_report.py

    - name: 📤 上传趋势报告
      uses: actions/upload-artifact@v3
      with:
        name: quality-trend-report
        path: trend-report.html
