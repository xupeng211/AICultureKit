name: Quality Gate

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'README*'

permissions: read-all

concurrency:
  group: quality-gate-${{ github.ref }}
  cancel-in-progress: true

env:
  SOFT_FAIL: 'true'                   # 非 pytest 检查一律软失败
  COVERAGE_THRESHOLD_MIN: '9'         # 统一 9%

jobs:
  gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install minimal test deps
        run: |
          python -m pip install -U pip
          # 项目自身 + 测试与质量工具（pytest 为唯一阻断项）
          python -m pip install -e .[test] pytest pytest-cov
          python -m pip install ruff mypy bandit detect-secrets || true

      - name: Show enforcement mode (soft-fail design)
        run: |
          echo "SOFT_FAIL=${SOFT_FAIL}"
          echo "COVERAGE_THRESHOLD_MIN=${COVERAGE_THRESHOLD_MIN}"

      # ---- 软失败检查：只报告，不阻断 ----
      - name: Ruff format (soft)
        run: python -m ruff format --check .
        continue-on-error: ${{ env.SOFT_FAIL == 'true' }}

      - name: Ruff lint (soft)
        run: python -m ruff check .
        continue-on-error: ${{ env.SOFT_FAIL == 'true' }}

      - name: MyPy (soft)
        run: mypy .
        continue-on-error: ${{ env.SOFT_FAIL == 'true' }}

      - name: Bandit (soft)
        run: bandit -q -r aiculture
        continue-on-error: ${{ env.SOFT_FAIL == 'true' }}

      - name: Detect secrets (soft)
        run: detect-secrets scan
        continue-on-error: ${{ env.SOFT_FAIL == 'true' }}

      # ---- 唯一阻断：pytest + coverage ≥ 阈值 ----
      - name: Test with coverage (BLOCKING)
        run: |
          # 使用 quarantine 机制（若项目已有 conftest，仍加 -m 兜底）
          pytest -q -m "not quarantine" \
            --cov=aiculture --cov-report=term-missing \
            --cov-fail-under=${COVERAGE_THRESHOLD_MIN}
