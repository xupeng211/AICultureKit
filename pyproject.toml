[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aiculture-kit"
version = "0.1.0"
description = "标准化AI主导开发的文化和最佳实践工具包"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "AICultureKit Contributors"}
]
keywords = ["ai", "development", "culture", "best-practices", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
]
dependencies = [
    "click>=8.0.0",
    "jinja2>=3.0.0",
    "pyyaml>=6.0.0",
    "gitpython>=3.1.0",
    "cookiecutter>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "black>=22.0.0",
    "isort>=5.0.0",
    "flake8>=4.0.0",
    "mypy>=0.991",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=2.20.0",
]

[project.urls]
Homepage = "https://github.com/your-username/AICultureKit"
Repository = "https://github.com/your-username/AICultureKit.git"
Documentation = "https://github.com/your-username/AICultureKit#readme"
"Bug Tracker" = "https://github.com/your-username/AICultureKit/issues"

[project.scripts]
aiculture = "aiculture.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["aiculture*"]

[tool.black]
line-length = 88
fast = true
skip-string-normalization = true
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
skip_gitignore = true
multi_line_output = 3
line_length = 88
known_first_party = ["aiculture"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["cookiecutter.*", "git.*", "jinja2.*", "yaml.*", "click.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=aiculture --cov-report=term-missing -p no:asyncio"
testpaths = ["tests"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
exclude = ["aiculture-env", ".venv", "venv", "build", "dist"]
per-file-ignores = [
    "tests/*:D",
    "__init__.py:F401"
]
jobs = "auto"

[tool.bandit]
exclude_dirs = ["tests", "aiculture-env", ".venv", "venv", ".git"]
skips = ["B101", "B601"]
confidence = "MEDIUM"

[tool.coverage.run]
source = ["aiculture"]
omit = ["tests/*", "*/tests/*"]

[tool.coverage.report]
fail_under = 40
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 88
fix = true
extend-exclude = [
    "aiculture/templates/**",
    "templates/**",
    "examples/**",
    "scaffolds/**",
    "tests/test_templates/**",
]

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B"]
ignore = ["E501", "F401", "F841"]

# 开发模式配置
[tool.aiculture.dev_mode]
enabled = true
bypass_blocking_errors = true
coverage_threshold = 40
quick_commit = true

# 生产模式配置  
[tool.aiculture.prod_mode]
enabled = false
coverage_threshold = 80
strict_checks = true

