#!/bin/bash
# AI行为强制检查钩子
# 确保AI工具遵循开发文化标准

set -e

echo "🤖 执行AI行为规范检查..."

# 检查是否有AI工具试图绕过检查
PYTHONPATH=. python -c "
import sys
import os
sys.path.insert(0, '.')

try:
    from aiculture.ai_behavior_enforcer import AIBehaviorEnforcer

    enforcer = AIBehaviorEnforcer('.')
    result = enforcer.enforce_ai_behavior()

    if result['violations_detected'] > 0:
        print('🚨 AI行为违规检测！')
        print(f'违规数量: {result[\"violations_detected\"]}')
        print(f'违规类型: {result[\"violations\"]}')
        print('')
        print('🛑 提交被阻止！AI工具必须遵循开发文化标准。')
        print('📋 解决方案：')
        print('1. 不要禁用Git钩子')
        print('2. 不要绕过质量门禁')
        print('3. 修复所有文化检查错误')
        print('4. 通过正当途径提交代码')
        sys.exit(1)

    print('✅ AI行为规范检查通过')

except ImportError:
    print('⚠️ AI行为检查模块未找到，跳过检查')
except Exception as e:
    print(f'⚠️ AI行为检查执行失败: {e}')
    print('继续执行其他检查...')
"

# 继续执行原有的文化检查
echo "🔍 执行文化标准检查..."
PYTHONPATH=. python -c "
from aiculture.culture_enforcer import CultureEnforcer
import sys

try:
    enforcer = CultureEnforcer('.')
    result = enforcer.enforce_all()

    print(f'📊 文化质量评分: {result.get(\"score\", 0)}/100')
    print(f'❌ 错误: {result.get(\"errors\", 0)} 个')
    print(f'⚠️  警告: {result.get(\"warnings\", 0)} 个')

    # 如果有阻塞性错误，阻止提交
    if result.get('errors', 0) > 0:
        print('')
        print('🛑 提交被阻止：存在阻塞性错误')
        print('📋 AI工具必须：')
        print('1. 分析所有错误详情')
        print('2. 逐一修复每个问题')
        print('3. 重新运行检查验证')
        print('4. 确保评分达到标准')
        print('')
        print('❌ 禁止绕过此检查！这是文化标准的核心要求。')
        sys.exit(1)

    # 如果质量评分过低，警告但不阻止
    if result.get('score', 0) < 70:
        print('⚠️  警告：文化质量评分较低，建议改进')

    print('✅ 文化标准检查通过')

except Exception as e:
    print(f'❌ 文化检查失败: {e}')
    print('🛑 提交被阻止！请修复文化检查问题。')
    sys.exit(1)
"

echo "✅ 所有检查通过，允许提交"
