ai_learning:
  custom_rules_count: 6
  last_learning: 1755664069.2541826
  patterns_count: 5
  project_maturity: intermediate
  recommended_strictness: 0.85
cicd:
  ai_instructions:
  - 配置GitHub Actions或类似CI工具
  - 确保所有检查都通过才能部署
  - 实现蓝绿部署或滚动更新
  - 监控部署后的系统健康状态
  - 自动化数据库迁移和配置更新
  category: ci_cd
  description: 自动化构建、测试和部署流程
  enforcement_level: strict
  examples:
    bad: 手动测试 -> 手动部署
    good: 自动化测试 -> 代码审查 -> 自动部署
  name: 持续集成/持续部署
  rules:
  - 每次提交都触发自动化构建
  - 自动化测试必须通过才能合并
  - 代码审查是必须的
  - 部署应该是自动化和可重复的
  - 回滚机制要简单快速
  tools:
  - github-actions
  - docker
  - kubernetes
documentation:
  ai_instructions:
  - 为每个公共API编写文档字符串
  - 保持README的简洁和实用
  - 记录重要的设计决策
  - 提供代码示例和使用场景
  - 定期审查和更新文档
  category: documentation
  description: 维护高质量的项目文档
  enforcement_level: strict
  examples:
    bad: 'def calc(x): # 计算'
    good: "def calculate_tax(amount: float) -> float:\n    \"\"\"计算税额，根据当前税率政策\"\"\
      \""
  name: 文档驱动开发
  rules:
  - README必须包含快速开始指南
  - API文档要完整和最新
  - 代码注释要解释为什么而不是什么
  - 架构决策要有记录
  - 变更日志要及时更新
  tools:
  - sphinx
  - mkdocs
  - swagger
dry:
  ai_instructions:
  - 发现重复代码时立即重构
  - 创建工具函数和帮助类来消除重复
  - 使用配置文件而不是硬编码值
  - 优先使用现有的库和框架功能
  category: code_quality
  description: Don't Repeat Yourself - 避免重复代码
  enforcement_level: strict
  examples:
    bad: 'if ''@'' in email and ''.'' in email: ...'
    good: 'def validate_email(email: str) -> bool: ...'
  name: DRY原则
  rules:
  - 每个知识点在系统中都应该有一个单一的、无歧义的、权威的表示
  - 重复的代码应该抽取成函数、类或模块
  - 配置信息应该集中管理
  - 业务逻辑应该避免重复实现
  tools:
  - duplicate-code-detection
  - refactoring-tools
integrated_learning:
  cross_patterns_count: 3
  last_learning: 1755664526.786306
  overall_maturity: intermediate
  recommended_strictness: 0.75
  supported_languages:
  - javascript
language_rules:
  javascript:
    complexity_threshold:
      enabled: true
      max_complexity: 5
      severity: warning
    enforce_function_naming_style:
      enabled: true
      severity: warning
      style: camelCase
    enforce_variable_naming_style:
      enabled: true
      severity: warning
      style: camelCase
    function_length_threshold:
      enabled: true
      max_lines: 20
      severity: info
    style_quote_preference:
      enabled: true
      preference: single
      severity: info
microservices:
  ai_instructions:
  - 设计服务时考虑业务边界
  - 避免服务间直接数据库访问
  - 实现健康检查和监控端点
  - 设计幂等的API接口
  - 考虑服务降级和熔断机制
  category: architecture
  description: 构建可扩展的分布式系统
  enforcement_level: strict
  examples:
    bad: monolithic-application
    good: user-service, order-service, payment-service
  name: 微服务架构原则
  rules:
  - 服务按业务领域拆分
  - 服务间松耦合高内聚
  - 每个服务独立部署和扩展
  - 服务间通过API通信
  - 数据库分离
  tools:
  - docker
  - kubernetes
  - api-gateway
performance:
  ai_instructions:
  - 优化数据库查询和索引
  - 实现多层缓存策略
  - 使用异步处理非关键任务
  - 压缩和优化静态资源
  - 监控关键性能指标
  category: performance
  description: 构建高性能的应用程序
  enforcement_level: strict
  examples:
    bad: SELECT * FROM users
    good: SELECT * FROM users WHERE id = ? LIMIT 1
  name: 性能优化原则
  rules:
  - API响应时间 < 200ms
  - 数据库查询优化
  - 缓存策略设计
  - 资源懒加载
  - 监控和告警
  tools:
  - redis
  - nginx
  - prometheus
quality:
  custom_rules:
    complexity_threshold:
      enabled: true
      max_complexity: 5
      severity: warning
    enforce_class_naming_style_preference:
      enabled: true
      severity: warning
      style: PascalCase
    enforce_variable_naming_style_preference:
      enabled: true
      severity: warning
      style: snake_case
    max_line_length:
      enabled: true
      max_length: 28
      severity: warning
    require_docstrings:
      enabled: true
      min_coverage: 0.7741935483870969
      severity: info
    string_quote_style:
      enabled: true
      preferred: double
      severity: info
  strictness: 0.85
  unified_strictness: 0.75
security:
  ai_instructions:
  - 永远不要信任用户输入
  - 使用参数化查询防止SQL注入
  - 实现CSRF和XSS防护
  - 使用HTTPS和强密码策略
  - 记录安全相关的操作日志
  category: security
  description: 确保应用程序安全
  enforcement_level: strict
  examples:
    bad: password == user.password
    good: bcrypt.hashpw(password.encode('utf-8'), salt)
  name: 安全开发原则
  rules:
  - 最小权限原则
  - 输入验证和输出编码
  - 安全的认证和授权
  - 数据加密传输和存储
  - 定期安全审计
  tools:
  - bandit
  - safety
  - owasp-zap
solid:
  ai_instructions:
  - 设计类时确保每个类只有一个改变的理由
  - 使用接口和抽象类来定义契约
  - 优先使用组合而不是继承
  - 创建小而专注的接口
  - 依赖注入而不是硬编码依赖
  category: code_quality
  description: 面向对象设计的五大基本原则
  enforcement_level: strict
  examples:
    bad: 'class UserManager: # 既管理用户又处理邮件'
    good: 'class UserRepository(ABC): ...'
  name: SOLID原则
  rules:
  - '单一职责原则(SRP): 每个类只负责一个功能'
  - '开放封闭原则(OCP): 对扩展开放，对修改封闭'
  - '里氏替换原则(LSP): 子类应该能够替换父类'
  - '接口隔离原则(ISP): 不强迫客户依赖不需要的接口'
  - '依赖倒置原则(DIP): 依赖于抽象而不是具体实现'
  tools:
  - mypy
  - pylint
  - flake8
testing:
  ai_instructions:
  - 为每个函数和类编写单元测试
  - 使用有意义的测试名称
  - 测试正常路径和异常路径
  - 使用mock对象隔离依赖
  - 保持测试的简单和专注
  category: testing
  description: 确保代码质量和可维护性
  enforcement_level: strict
  examples:
    bad: 'def test1(): ...'
    good: 'def test_user_registration_with_valid_email(): ...'
  name: 测试驱动开发
  rules:
  - '测试金字塔: 单元测试 > 集成测试 > E2E测试'
  - 测试覆盖率至少80%
  - 编写可读性强的测试
  - 测试应该快速且独立
  - 先写测试再写实现
  tools:
  - pytest
  - coverage
  - mock
